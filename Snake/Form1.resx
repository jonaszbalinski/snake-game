<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="pictureBox1.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        5GLsS/Dr56BO98BmjIOCoz2Cic6hxBJye2AhX0I+Uv7xoPxhofzjE+W/9JgX1gOlk+Ui+V1iWVC35zfK
        C9aQ694H8pyX/zkVk77ykb5Nu8h7Z2JBsAlVYfmkErDnjNSZ86uEkwuk5ijk/Wu9JYQVj88Q1ouxWN/X
        EYbJCsvNgU57HMrK8umr69OnFqDUFz5AWB/CWXyVaA1lxjDvyvI04l8qQ0cd+AiEdRbmLgi9ZUW9JJp2
        zO2E9ffwuPyrI2qudmnWXUBYZ2FGWA438UaVNZW8P4/v2X5gcCuvz1SrfTr/JEBYZ2FCWD638PqAZvp6
        PKd218EhrPIfIAwQ1lkQC8vvGUl1SLDMRwNhnQeRsnzn/8snI2N8iy8wBMI6D/z7hLgBBYIBYZ0I1jc1
        nPNhNHByIKxzQbwsRGkFYgJhnY3jOaP3T9xfMsdHOaN9lPL5k6D4rPxnA2GdieePdZzjmzBea0YUhx8N
        hHUi3k7dkdzgZEBYZ+LVWBAWOBkQFgAgDBAWACAMEBYAIAwQFgAgDBAWACAMEBYAIAwQFgAgDBAWACAM
        EBYAIAwQFgAgDBAWACAMEBYAIAwQFgAgDBAWACAMEBYAIAwQFgAgDBAWACAMEBYAIAwQFgAgDBAWACAM
        EBYAIAwQFgAgDBAWACAMEBYAIAwQFgAgDBAWACAMEBYAIAwQFgAgDBAWACAMEBYAIAwQFgAgDBAWACAM
        EBYAIAwQFgAgDBAWACAMEBYAIAwQFgAgDBAWACAMEBYAIAj//v0P4A9SXhoWvZkAAAAASUVORK5CYII=
</value>
  </data>
</root>